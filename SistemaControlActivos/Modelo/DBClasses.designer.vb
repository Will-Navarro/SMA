'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.34014
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Plantas")>  _
Partial Public Class DBClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertActivo(instance As Activo)
    End Sub
  Partial Private Sub UpdateActivo(instance As Activo)
    End Sub
  Partial Private Sub DeleteActivo(instance As Activo)
    End Sub
  Partial Private Sub InsertAreas(instance As Areas)
    End Sub
  Partial Private Sub UpdateAreas(instance As Areas)
    End Sub
  Partial Private Sub DeleteAreas(instance As Areas)
    End Sub
  Partial Private Sub InsertEstado(instance As Estado)
    End Sub
  Partial Private Sub UpdateEstado(instance As Estado)
    End Sub
  Partial Private Sub DeleteEstado(instance As Estado)
    End Sub
  Partial Private Sub InsertMantenimiento(instance As Mantenimiento)
    End Sub
  Partial Private Sub UpdateMantenimiento(instance As Mantenimiento)
    End Sub
  Partial Private Sub DeleteMantenimiento(instance As Mantenimiento)
    End Sub
  Partial Private Sub InsertPersonal(instance As Personal)
    End Sub
  Partial Private Sub UpdatePersonal(instance As Personal)
    End Sub
  Partial Private Sub DeletePersonal(instance As Personal)
    End Sub
  Partial Private Sub InsertPlantas(instance As Plantas)
    End Sub
  Partial Private Sub UpdatePlantas(instance As Plantas)
    End Sub
  Partial Private Sub DeletePlantas(instance As Plantas)
    End Sub
  Partial Private Sub InsertProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub UpdateProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub DeleteProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub InsertTipoPersonal(instance As TipoPersonal)
    End Sub
  Partial Private Sub UpdateTipoPersonal(instance As TipoPersonal)
    End Sub
  Partial Private Sub DeleteTipoPersonal(instance As TipoPersonal)
    End Sub
  Partial Private Sub InsertTrazabilidad(instance As Trazabilidad)
    End Sub
  Partial Private Sub UpdateTrazabilidad(instance As Trazabilidad)
    End Sub
  Partial Private Sub DeleteTrazabilidad(instance As Trazabilidad)
    End Sub
  Partial Private Sub InsertUsuarios(instance As Usuarios)
    End Sub
  Partial Private Sub UpdateUsuarios(instance As Usuarios)
    End Sub
  Partial Private Sub DeleteUsuarios(instance As Usuarios)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("PlantasConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Activo() As System.Data.Linq.Table(Of Activo)
		Get
			Return Me.GetTable(Of Activo)
		End Get
	End Property
	
	Public ReadOnly Property Areas() As System.Data.Linq.Table(Of Areas)
		Get
			Return Me.GetTable(Of Areas)
		End Get
	End Property
	
	Public ReadOnly Property Estado() As System.Data.Linq.Table(Of Estado)
		Get
			Return Me.GetTable(Of Estado)
		End Get
	End Property
	
	Public ReadOnly Property Mantenimiento() As System.Data.Linq.Table(Of Mantenimiento)
		Get
			Return Me.GetTable(Of Mantenimiento)
		End Get
	End Property
	
	Public ReadOnly Property Personal() As System.Data.Linq.Table(Of Personal)
		Get
			Return Me.GetTable(Of Personal)
		End Get
	End Property
	
	Public ReadOnly Property Plantas() As System.Data.Linq.Table(Of Plantas)
		Get
			Return Me.GetTable(Of Plantas)
		End Get
	End Property
	
	Public ReadOnly Property Proveedor() As System.Data.Linq.Table(Of Proveedor)
		Get
			Return Me.GetTable(Of Proveedor)
		End Get
	End Property
	
	Public ReadOnly Property TipoPersonal() As System.Data.Linq.Table(Of TipoPersonal)
		Get
			Return Me.GetTable(Of TipoPersonal)
		End Get
	End Property
	
	Public ReadOnly Property Trazabilidad() As System.Data.Linq.Table(Of Trazabilidad)
		Get
			Return Me.GetTable(Of Trazabilidad)
		End Get
	End Property
	
	Public ReadOnly Property Usuarios() As System.Data.Linq.Table(Of Usuarios)
		Get
			Return Me.GetTable(Of Usuarios)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Activo")>  _
Partial Public Class Activo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _INMOVILIARIO As String
	
	Private _SN As String
	
	Private _NUMERO_INVENTARIO As String
	
	Private _DENOMINACION_INMOVILIZADO As String
	
	Private _SpN_INMOVILIARIO As String
	
	Private _FE_CAPIT As Date
	
	Private _VC_CURSO As Double
	
	Private _idArea As Integer
	
	Private _CODIGO_TAVO As String
	
	Private _idPlanta As Integer
	
	Private _idPersonal As Integer
	
	Private _idEstado As Integer
	
	Private _idProveedor As System.Nullable(Of Integer)
	
	Private _Mantenimiento As EntitySet(Of Mantenimiento)
	
	Private _Trazabilidad As EntitySet(Of Trazabilidad)
	
	Private _Areas As EntityRef(Of Areas)
	
	Private _Estado As EntityRef(Of Estado)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Plantas As EntityRef(Of Plantas)
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnINMOVILIARIOChanging(value As String)
    End Sub
    Partial Private Sub OnINMOVILIARIOChanged()
    End Sub
    Partial Private Sub OnSNChanging(value As String)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnNUMERO_INVENTARIOChanging(value As String)
    End Sub
    Partial Private Sub OnNUMERO_INVENTARIOChanged()
    End Sub
    Partial Private Sub OnDENOMINACION_INMOVILIZADOChanging(value As String)
    End Sub
    Partial Private Sub OnDENOMINACION_INMOVILIZADOChanged()
    End Sub
    Partial Private Sub OnSpN_INMOVILIARIOChanging(value As String)
    End Sub
    Partial Private Sub OnSpN_INMOVILIARIOChanged()
    End Sub
    Partial Private Sub OnFE_CAPITChanging(value As Date)
    End Sub
    Partial Private Sub OnFE_CAPITChanged()
    End Sub
    Partial Private Sub OnVC_CURSOChanging(value As Double)
    End Sub
    Partial Private Sub OnVC_CURSOChanged()
    End Sub
    Partial Private Sub OnidAreaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidAreaChanged()
    End Sub
    Partial Private Sub OnCODIGO_TAVOChanging(value As String)
    End Sub
    Partial Private Sub OnCODIGO_TAVOChanged()
    End Sub
    Partial Private Sub OnidPlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidPlantaChanged()
    End Sub
    Partial Private Sub OnidPersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnidPersonalChanged()
    End Sub
    Partial Private Sub OnidEstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidEstadoChanged()
    End Sub
    Partial Private Sub OnidProveedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidProveedorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Mantenimiento = New EntitySet(Of Mantenimiento)(AddressOf Me.attach_Mantenimiento, AddressOf Me.detach_Mantenimiento)
		Me._Trazabilidad = New EntitySet(Of Trazabilidad)(AddressOf Me.attach_Trazabilidad, AddressOf Me.detach_Trazabilidad)
		Me._Areas = CType(Nothing, EntityRef(Of Areas))
		Me._Estado = CType(Nothing, EntityRef(Of Estado))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Plantas = CType(Nothing, EntityRef(Of Plantas))
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INMOVILIARIO", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property INMOVILIARIO() As String
		Get
			Return Me._INMOVILIARIO
		End Get
		Set
			If (String.Equals(Me._INMOVILIARIO, value) = false) Then
				Me.OnINMOVILIARIOChanging(value)
				Me.SendPropertyChanging
				Me._INMOVILIARIO = value
				Me.SendPropertyChanged("INMOVILIARIO")
				Me.OnINMOVILIARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property SN() As String
		Get
			Return Me._SN
		End Get
		Set
			If (String.Equals(Me._SN, value) = false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMERO_INVENTARIO", DbType:="NVarChar(100)")>  _
	Public Property NUMERO_INVENTARIO() As String
		Get
			Return Me._NUMERO_INVENTARIO
		End Get
		Set
			If (String.Equals(Me._NUMERO_INVENTARIO, value) = false) Then
				Me.OnNUMERO_INVENTARIOChanging(value)
				Me.SendPropertyChanging
				Me._NUMERO_INVENTARIO = value
				Me.SendPropertyChanged("NUMERO_INVENTARIO")
				Me.OnNUMERO_INVENTARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DENOMINACION_INMOVILIZADO", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property DENOMINACION_INMOVILIZADO() As String
		Get
			Return Me._DENOMINACION_INMOVILIZADO
		End Get
		Set
			If (String.Equals(Me._DENOMINACION_INMOVILIZADO, value) = false) Then
				Me.OnDENOMINACION_INMOVILIZADOChanging(value)
				Me.SendPropertyChanging
				Me._DENOMINACION_INMOVILIZADO = value
				Me.SendPropertyChanged("DENOMINACION_INMOVILIZADO")
				Me.OnDENOMINACION_INMOVILIZADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpN_INMOVILIARIO", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property SpN_INMOVILIARIO() As String
		Get
			Return Me._SpN_INMOVILIARIO
		End Get
		Set
			If (String.Equals(Me._SpN_INMOVILIARIO, value) = false) Then
				Me.OnSpN_INMOVILIARIOChanging(value)
				Me.SendPropertyChanging
				Me._SpN_INMOVILIARIO = value
				Me.SendPropertyChanged("SpN_INMOVILIARIO")
				Me.OnSpN_INMOVILIARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FE_CAPIT", DbType:="Date NOT NULL")>  _
	Public Property FE_CAPIT() As Date
		Get
			Return Me._FE_CAPIT
		End Get
		Set
			If ((Me._FE_CAPIT = value)  _
						= false) Then
				Me.OnFE_CAPITChanging(value)
				Me.SendPropertyChanging
				Me._FE_CAPIT = value
				Me.SendPropertyChanged("FE_CAPIT")
				Me.OnFE_CAPITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VC_CURSO", DbType:="Float NOT NULL")>  _
	Public Property VC_CURSO() As Double
		Get
			Return Me._VC_CURSO
		End Get
		Set
			If ((Me._VC_CURSO = value)  _
						= false) Then
				Me.OnVC_CURSOChanging(value)
				Me.SendPropertyChanging
				Me._VC_CURSO = value
				Me.SendPropertyChanged("VC_CURSO")
				Me.OnVC_CURSOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idArea", DbType:="Int NOT NULL")>  _
	Public Property idArea() As Integer
		Get
			Return Me._idArea
		End Get
		Set
			If ((Me._idArea = value)  _
						= false) Then
				If Me._Areas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidAreaChanging(value)
				Me.SendPropertyChanging
				Me._idArea = value
				Me.SendPropertyChanged("idArea")
				Me.OnidAreaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO_TAVO", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property CODIGO_TAVO() As String
		Get
			Return Me._CODIGO_TAVO
		End Get
		Set
			If (String.Equals(Me._CODIGO_TAVO, value) = false) Then
				Me.OnCODIGO_TAVOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO_TAVO = value
				Me.SendPropertyChanged("CODIGO_TAVO")
				Me.OnCODIGO_TAVOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idPlanta", DbType:="Int NOT NULL")>  _
	Public Property idPlanta() As Integer
		Get
			Return Me._idPlanta
		End Get
		Set
			If ((Me._idPlanta = value)  _
						= false) Then
				If Me._Plantas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidPlantaChanging(value)
				Me.SendPropertyChanging
				Me._idPlanta = value
				Me.SendPropertyChanged("idPlanta")
				Me.OnidPlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idPersonal", DbType:="Int NOT NULL")>  _
	Public Property idPersonal() As Integer
		Get
			Return Me._idPersonal
		End Get
		Set
			If ((Me._idPersonal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidPersonalChanging(value)
				Me.SendPropertyChanging
				Me._idPersonal = value
				Me.SendPropertyChanged("idPersonal")
				Me.OnidPersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEstado", DbType:="Int NOT NULL")>  _
	Public Property idEstado() As Integer
		Get
			Return Me._idEstado
		End Get
		Set
			If ((Me._idEstado = value)  _
						= false) Then
				If Me._Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidEstadoChanging(value)
				Me.SendPropertyChanging
				Me._idEstado = value
				Me.SendPropertyChanged("idEstado")
				Me.OnidEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idProveedor", DbType:="Int")>  _
	Public Property idProveedor() As System.Nullable(Of Integer)
		Get
			Return Me._idProveedor
		End Get
		Set
			If (Me._idProveedor.Equals(value) = false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidProveedorChanging(value)
				Me.SendPropertyChanging
				Me._idProveedor = value
				Me.SendPropertyChanged("idProveedor")
				Me.OnidProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Activo_Mantenimiento", Storage:="_Mantenimiento", ThisKey:="INMOVILIARIO", OtherKey:="idActivo")>  _
	Public Property Mantenimiento() As EntitySet(Of Mantenimiento)
		Get
			Return Me._Mantenimiento
		End Get
		Set
			Me._Mantenimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Activo_Trazabilidad", Storage:="_Trazabilidad", ThisKey:="INMOVILIARIO", OtherKey:="ACTIVO")>  _
	Public Property Trazabilidad() As EntitySet(Of Trazabilidad)
		Get
			Return Me._Trazabilidad
		End Get
		Set
			Me._Trazabilidad.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Areas_Activo", Storage:="_Areas", ThisKey:="idArea", OtherKey:="idArea", IsForeignKey:=true)>  _
	Public Property Areas() As Areas
		Get
			Return Me._Areas.Entity
		End Get
		Set
			Dim previousValue As Areas = Me._Areas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Areas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Areas.Entity = Nothing
					previousValue.Activo.Remove(Me)
				End If
				Me._Areas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Activo.Add(Me)
					Me._idArea = value.idArea
				Else
					Me._idArea = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Areas")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Estado_Activo", Storage:="_Estado", ThisKey:="idEstado", OtherKey:="idEstado", IsForeignKey:=true)>  _
	Public Property Estado() As Estado
		Get
			Return Me._Estado.Entity
		End Get
		Set
			Dim previousValue As Estado = Me._Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Estado.Entity = Nothing
					previousValue.Activo.Remove(Me)
				End If
				Me._Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Activo.Add(Me)
					Me._idEstado = value.idEstado
				Else
					Me._idEstado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Activo", Storage:="_Personal", ThisKey:="idPersonal", OtherKey:="idUsuario", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Activo.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Activo.Add(Me)
					Me._idPersonal = value.idUsuario
				Else
					Me._idPersonal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plantas_Activo", Storage:="_Plantas", ThisKey:="idPlanta", OtherKey:="idPlanta", IsForeignKey:=true)>  _
	Public Property Plantas() As Plantas
		Get
			Return Me._Plantas.Entity
		End Get
		Set
			Dim previousValue As Plantas = Me._Plantas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Plantas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Plantas.Entity = Nothing
					previousValue.Activo.Remove(Me)
				End If
				Me._Plantas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Activo.Add(Me)
					Me._idPlanta = value.idPlanta
				Else
					Me._idPlanta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Plantas")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Activo", Storage:="_Proveedor", ThisKey:="idProveedor", OtherKey:="idProveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Activo.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Activo.Add(Me)
					Me._idProveedor = value.idProveedor
				Else
					Me._idProveedor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Mantenimiento(ByVal entity As Mantenimiento)
		Me.SendPropertyChanging
		entity.Activo = Me
	End Sub
	
	Private Sub detach_Mantenimiento(ByVal entity As Mantenimiento)
		Me.SendPropertyChanging
		entity.Activo = Nothing
	End Sub
	
	Private Sub attach_Trazabilidad(ByVal entity As Trazabilidad)
		Me.SendPropertyChanging
		entity.Activo1 = Me
	End Sub
	
	Private Sub detach_Trazabilidad(ByVal entity As Trazabilidad)
		Me.SendPropertyChanging
		entity.Activo1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Areas")>  _
Partial Public Class Areas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idArea As Integer
	
	Private _descripcion As String
	
	Private _Activo As EntitySet(Of Activo)
	
	Private _Usuarios As EntitySet(Of Usuarios)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidAreaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidAreaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Activo = New EntitySet(Of Activo)(AddressOf Me.attach_Activo, AddressOf Me.detach_Activo)
		Me._Usuarios = New EntitySet(Of Usuarios)(AddressOf Me.attach_Usuarios, AddressOf Me.detach_Usuarios)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idArea", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idArea() As Integer
		Get
			Return Me._idArea
		End Get
		Set
			If ((Me._idArea = value)  _
						= false) Then
				Me.OnidAreaChanging(value)
				Me.SendPropertyChanging
				Me._idArea = value
				Me.SendPropertyChanged("idArea")
				Me.OnidAreaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Areas_Activo", Storage:="_Activo", ThisKey:="idArea", OtherKey:="idArea")>  _
	Public Property Activo() As EntitySet(Of Activo)
		Get
			Return Me._Activo
		End Get
		Set
			Me._Activo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Areas_Usuarios", Storage:="_Usuarios", ThisKey:="idArea", OtherKey:="idArea")>  _
	Public Property Usuarios() As EntitySet(Of Usuarios)
		Get
			Return Me._Usuarios
		End Get
		Set
			Me._Usuarios.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Activo(ByVal entity As Activo)
		Me.SendPropertyChanging
		entity.Areas = Me
	End Sub
	
	Private Sub detach_Activo(ByVal entity As Activo)
		Me.SendPropertyChanging
		entity.Areas = Nothing
	End Sub
	
	Private Sub attach_Usuarios(ByVal entity As Usuarios)
		Me.SendPropertyChanging
		entity.Areas = Me
	End Sub
	
	Private Sub detach_Usuarios(ByVal entity As Usuarios)
		Me.SendPropertyChanging
		entity.Areas = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Estado")>  _
Partial Public Class Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idEstado As Integer
	
	Private _descripcion As String
	
	Private _Activo As EntitySet(Of Activo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidEstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidEstadoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Activo = New EntitySet(Of Activo)(AddressOf Me.attach_Activo, AddressOf Me.detach_Activo)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEstado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idEstado() As Integer
		Get
			Return Me._idEstado
		End Get
		Set
			If ((Me._idEstado = value)  _
						= false) Then
				Me.OnidEstadoChanging(value)
				Me.SendPropertyChanging
				Me._idEstado = value
				Me.SendPropertyChanged("idEstado")
				Me.OnidEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Estado_Activo", Storage:="_Activo", ThisKey:="idEstado", OtherKey:="idEstado")>  _
	Public Property Activo() As EntitySet(Of Activo)
		Get
			Return Me._Activo
		End Get
		Set
			Me._Activo.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Activo(ByVal entity As Activo)
		Me.SendPropertyChanging
		entity.Estado = Me
	End Sub
	
	Private Sub detach_Activo(ByVal entity As Activo)
		Me.SendPropertyChanging
		entity.Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Mantenimiento")>  _
Partial Public Class Mantenimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idMantenimiento As Integer
	
	Private _fecha As Date
	
	Private _horaInicio As String
	
	Private _horaFin As String
	
	Private _tipoMant As String
	
	Private _estado As String
	
	Private _descripcion As String
	
	Private _encargado As Integer
	
	Private _idActivo As String
	
	Private _Activo As EntityRef(Of Activo)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidMantenimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidMantenimientoChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As Date)
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OnhoraInicioChanging(value As String)
    End Sub
    Partial Private Sub OnhoraInicioChanged()
    End Sub
    Partial Private Sub OnhoraFinChanging(value As String)
    End Sub
    Partial Private Sub OnhoraFinChanged()
    End Sub
    Partial Private Sub OntipoMantChanging(value As String)
    End Sub
    Partial Private Sub OntipoMantChanged()
    End Sub
    Partial Private Sub OnestadoChanging(value As String)
    End Sub
    Partial Private Sub OnestadoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    Partial Private Sub OnencargadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnencargadoChanged()
    End Sub
    Partial Private Sub OnidActivoChanging(value As String)
    End Sub
    Partial Private Sub OnidActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Activo = CType(Nothing, EntityRef(Of Activo))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idMantenimiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idMantenimiento() As Integer
		Get
			Return Me._idMantenimiento
		End Get
		Set
			If ((Me._idMantenimiento = value)  _
						= false) Then
				Me.OnidMantenimientoChanging(value)
				Me.SendPropertyChanging
				Me._idMantenimiento = value
				Me.SendPropertyChanged("idMantenimiento")
				Me.OnidMantenimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="Date NOT NULL")>  _
	Public Property fecha() As Date
		Get
			Return Me._fecha
		End Get
		Set
			If ((Me._fecha = value)  _
						= false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_horaInicio", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property horaInicio() As String
		Get
			Return Me._horaInicio
		End Get
		Set
			If (String.Equals(Me._horaInicio, value) = false) Then
				Me.OnhoraInicioChanging(value)
				Me.SendPropertyChanging
				Me._horaInicio = value
				Me.SendPropertyChanged("horaInicio")
				Me.OnhoraInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_horaFin", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property horaFin() As String
		Get
			Return Me._horaFin
		End Get
		Set
			If (String.Equals(Me._horaFin, value) = false) Then
				Me.OnhoraFinChanging(value)
				Me.SendPropertyChanging
				Me._horaFin = value
				Me.SendPropertyChanged("horaFin")
				Me.OnhoraFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipoMant", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tipoMant() As String
		Get
			Return Me._tipoMant
		End Get
		Set
			If (String.Equals(Me._tipoMant, value) = false) Then
				Me.OntipoMantChanging(value)
				Me.SendPropertyChanging
				Me._tipoMant = value
				Me.SendPropertyChanged("tipoMant")
				Me.OntipoMantChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estado", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property estado() As String
		Get
			Return Me._estado
		End Get
		Set
			If (String.Equals(Me._estado, value) = false) Then
				Me.OnestadoChanging(value)
				Me.SendPropertyChanging
				Me._estado = value
				Me.SendPropertyChanged("estado")
				Me.OnestadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_encargado", DbType:="Int NOT NULL")>  _
	Public Property encargado() As Integer
		Get
			Return Me._encargado
		End Get
		Set
			If ((Me._encargado = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnencargadoChanging(value)
				Me.SendPropertyChanging
				Me._encargado = value
				Me.SendPropertyChanged("encargado")
				Me.OnencargadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idActivo", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property idActivo() As String
		Get
			Return Me._idActivo
		End Get
		Set
			If (String.Equals(Me._idActivo, value) = false) Then
				If Me._Activo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidActivoChanging(value)
				Me.SendPropertyChanging
				Me._idActivo = value
				Me.SendPropertyChanged("idActivo")
				Me.OnidActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Activo_Mantenimiento", Storage:="_Activo", ThisKey:="idActivo", OtherKey:="INMOVILIARIO", IsForeignKey:=true)>  _
	Public Property Activo() As Activo
		Get
			Return Me._Activo.Entity
		End Get
		Set
			Dim previousValue As Activo = Me._Activo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Activo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Activo.Entity = Nothing
					previousValue.Mantenimiento.Remove(Me)
				End If
				Me._Activo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Mantenimiento.Add(Me)
					Me._idActivo = value.INMOVILIARIO
				Else
					Me._idActivo = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Activo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Mantenimiento", Storage:="_Personal", ThisKey:="encargado", OtherKey:="idUsuario", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Mantenimiento.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Mantenimiento.Add(Me)
					Me._encargado = value.idUsuario
				Else
					Me._encargado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal")>  _
Partial Public Class Personal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idUsuario As Integer
	
	Private _idTPersonal As Integer
	
	Private _idPlanta As Integer
	
	Private _Nombre As String
	
	Private _Apellido1 As String
	
	Private _Apellido2 As String
	
	Private _Activo As EntitySet(Of Activo)
	
	Private _Mantenimiento As EntitySet(Of Mantenimiento)
	
	Private _Trazabilidad As EntitySet(Of Trazabilidad)
	
	Private _Trazabilidad1 As EntitySet(Of Trazabilidad)
	
	Private _Usuarios As EntityRef(Of Usuarios)
	
	Private _Plantas As EntityRef(Of Plantas)
	
	Private _TipoPersonal As EntityRef(Of TipoPersonal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnidUsuarioChanged()
    End Sub
    Partial Private Sub OnidTPersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnidTPersonalChanged()
    End Sub
    Partial Private Sub OnidPlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidPlantaChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnApellido1Changing(value As String)
    End Sub
    Partial Private Sub OnApellido1Changed()
    End Sub
    Partial Private Sub OnApellido2Changing(value As String)
    End Sub
    Partial Private Sub OnApellido2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Activo = New EntitySet(Of Activo)(AddressOf Me.attach_Activo, AddressOf Me.detach_Activo)
		Me._Mantenimiento = New EntitySet(Of Mantenimiento)(AddressOf Me.attach_Mantenimiento, AddressOf Me.detach_Mantenimiento)
		Me._Trazabilidad = New EntitySet(Of Trazabilidad)(AddressOf Me.attach_Trazabilidad, AddressOf Me.detach_Trazabilidad)
		Me._Trazabilidad1 = New EntitySet(Of Trazabilidad)(AddressOf Me.attach_Trazabilidad1, AddressOf Me.detach_Trazabilidad1)
		Me._Usuarios = CType(Nothing, EntityRef(Of Usuarios))
		Me._Plantas = CType(Nothing, EntityRef(Of Plantas))
		Me._TipoPersonal = CType(Nothing, EntityRef(Of TipoPersonal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idUsuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idUsuario() As Integer
		Get
			Return Me._idUsuario
		End Get
		Set
			If ((Me._idUsuario = value)  _
						= false) Then
				Me.OnidUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._idUsuario = value
				Me.SendPropertyChanged("idUsuario")
				Me.OnidUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTPersonal", DbType:="Int NOT NULL")>  _
	Public Property idTPersonal() As Integer
		Get
			Return Me._idTPersonal
		End Get
		Set
			If ((Me._idTPersonal = value)  _
						= false) Then
				If Me._TipoPersonal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidTPersonalChanging(value)
				Me.SendPropertyChanging
				Me._idTPersonal = value
				Me.SendPropertyChanged("idTPersonal")
				Me.OnidTPersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idPlanta", DbType:="Int NOT NULL")>  _
	Public Property idPlanta() As Integer
		Get
			Return Me._idPlanta
		End Get
		Set
			If ((Me._idPlanta = value)  _
						= false) Then
				If Me._Plantas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidPlantaChanging(value)
				Me.SendPropertyChanging
				Me._idPlanta = value
				Me.SendPropertyChanged("idPlanta")
				Me.OnidPlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Apellido1", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Apellido1() As String
		Get
			Return Me._Apellido1
		End Get
		Set
			If (String.Equals(Me._Apellido1, value) = false) Then
				Me.OnApellido1Changing(value)
				Me.SendPropertyChanging
				Me._Apellido1 = value
				Me.SendPropertyChanged("Apellido1")
				Me.OnApellido1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Apellido2", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Apellido2() As String
		Get
			Return Me._Apellido2
		End Get
		Set
			If (String.Equals(Me._Apellido2, value) = false) Then
				Me.OnApellido2Changing(value)
				Me.SendPropertyChanging
				Me._Apellido2 = value
				Me.SendPropertyChanged("Apellido2")
				Me.OnApellido2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Activo", Storage:="_Activo", ThisKey:="idUsuario", OtherKey:="idPersonal")>  _
	Public Property Activo() As EntitySet(Of Activo)
		Get
			Return Me._Activo
		End Get
		Set
			Me._Activo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Mantenimiento", Storage:="_Mantenimiento", ThisKey:="idUsuario", OtherKey:="encargado")>  _
	Public Property Mantenimiento() As EntitySet(Of Mantenimiento)
		Get
			Return Me._Mantenimiento
		End Get
		Set
			Me._Mantenimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Trazabilidad", Storage:="_Trazabilidad", ThisKey:="idUsuario", OtherKey:="IDCUSTODIOACTUAL")>  _
	Public Property Trazabilidad() As EntitySet(Of Trazabilidad)
		Get
			Return Me._Trazabilidad
		End Get
		Set
			Me._Trazabilidad.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Trazabilidad1", Storage:="_Trazabilidad1", ThisKey:="idUsuario", OtherKey:="IDNUEVOCUSTODIO")>  _
	Public Property Trazabilidad1() As EntitySet(Of Trazabilidad)
		Get
			Return Me._Trazabilidad1
		End Get
		Set
			Me._Trazabilidad1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Usuarios", Storage:="_Usuarios", ThisKey:="idUsuario", OtherKey:="idUsuario", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Usuarios() As Usuarios
		Get
			Return Me._Usuarios.Entity
		End Get
		Set
			Dim previousValue As Usuarios = Me._Usuarios.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuarios.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuarios.Entity = Nothing
					previousValue.Personal = Nothing
				End If
				Me._Usuarios.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Personal = Me
				End If
				Me.SendPropertyChanged("Usuarios")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plantas_Personal", Storage:="_Plantas", ThisKey:="idPlanta", OtherKey:="idPlanta", IsForeignKey:=true)>  _
	Public Property Plantas() As Plantas
		Get
			Return Me._Plantas.Entity
		End Get
		Set
			Dim previousValue As Plantas = Me._Plantas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Plantas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Plantas.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._Plantas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._idPlanta = value.idPlanta
				Else
					Me._idPlanta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Plantas")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoPersonal_Personal", Storage:="_TipoPersonal", ThisKey:="idTPersonal", OtherKey:="idTPersonal", IsForeignKey:=true)>  _
	Public Property TipoPersonal() As TipoPersonal
		Get
			Return Me._TipoPersonal.Entity
		End Get
		Set
			Dim previousValue As TipoPersonal = Me._TipoPersonal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoPersonal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoPersonal.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._TipoPersonal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._idTPersonal = value.idTPersonal
				Else
					Me._idTPersonal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TipoPersonal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Activo(ByVal entity As Activo)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Activo(ByVal entity As Activo)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Mantenimiento(ByVal entity As Mantenimiento)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Mantenimiento(ByVal entity As Mantenimiento)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Trazabilidad(ByVal entity As Trazabilidad)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Trazabilidad(ByVal entity As Trazabilidad)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Trazabilidad1(ByVal entity As Trazabilidad)
		Me.SendPropertyChanging
		entity.Personal1 = Me
	End Sub
	
	Private Sub detach_Trazabilidad1(ByVal entity As Trazabilidad)
		Me.SendPropertyChanging
		entity.Personal1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Plantas")>  _
Partial Public Class Plantas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idPlanta As Integer
	
	Private _Descripcion As String
	
	Private _Telefono As String
	
	Private _Activo As EntitySet(Of Activo)
	
	Private _Personal As EntitySet(Of Personal)
	
	Private _Trazabilidad As EntitySet(Of Trazabilidad)
	
	Private _Trazabilidad1 As EntitySet(Of Trazabilidad)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidPlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidPlantaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Activo = New EntitySet(Of Activo)(AddressOf Me.attach_Activo, AddressOf Me.detach_Activo)
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		Me._Trazabilidad = New EntitySet(Of Trazabilidad)(AddressOf Me.attach_Trazabilidad, AddressOf Me.detach_Trazabilidad)
		Me._Trazabilidad1 = New EntitySet(Of Trazabilidad)(AddressOf Me.attach_Trazabilidad1, AddressOf Me.detach_Trazabilidad1)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idPlanta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idPlanta() As Integer
		Get
			Return Me._idPlanta
		End Get
		Set
			If ((Me._idPlanta = value)  _
						= false) Then
				Me.OnidPlantaChanging(value)
				Me.SendPropertyChanging
				Me._idPlanta = value
				Me.SendPropertyChanged("idPlanta")
				Me.OnidPlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(10)")>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plantas_Activo", Storage:="_Activo", ThisKey:="idPlanta", OtherKey:="idPlanta")>  _
	Public Property Activo() As EntitySet(Of Activo)
		Get
			Return Me._Activo
		End Get
		Set
			Me._Activo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plantas_Personal", Storage:="_Personal", ThisKey:="idPlanta", OtherKey:="idPlanta")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plantas_Trazabilidad", Storage:="_Trazabilidad", ThisKey:="idPlanta", OtherKey:="IDNUEVAPLANTA")>  _
	Public Property Trazabilidad() As EntitySet(Of Trazabilidad)
		Get
			Return Me._Trazabilidad
		End Get
		Set
			Me._Trazabilidad.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plantas_Trazabilidad1", Storage:="_Trazabilidad1", ThisKey:="idPlanta", OtherKey:="IDPLANTACTUAL")>  _
	Public Property Trazabilidad1() As EntitySet(Of Trazabilidad)
		Get
			Return Me._Trazabilidad1
		End Get
		Set
			Me._Trazabilidad1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Activo(ByVal entity As Activo)
		Me.SendPropertyChanging
		entity.Plantas = Me
	End Sub
	
	Private Sub detach_Activo(ByVal entity As Activo)
		Me.SendPropertyChanging
		entity.Plantas = Nothing
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Plantas = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Plantas = Nothing
	End Sub
	
	Private Sub attach_Trazabilidad(ByVal entity As Trazabilidad)
		Me.SendPropertyChanging
		entity.Plantas = Me
	End Sub
	
	Private Sub detach_Trazabilidad(ByVal entity As Trazabilidad)
		Me.SendPropertyChanging
		entity.Plantas = Nothing
	End Sub
	
	Private Sub attach_Trazabilidad1(ByVal entity As Trazabilidad)
		Me.SendPropertyChanging
		entity.Plantas1 = Me
	End Sub
	
	Private Sub detach_Trazabilidad1(ByVal entity As Trazabilidad)
		Me.SendPropertyChanging
		entity.Plantas1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Proveedor")>  _
Partial Public Class Proveedor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idProveedor As Integer
	
	Private _cedJur As String
	
	Private _montoMax As Double
	
	Private _descripcion As String
	
	Private _Activo As EntitySet(Of Activo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnidProveedorChanged()
    End Sub
    Partial Private Sub OncedJurChanging(value As String)
    End Sub
    Partial Private Sub OncedJurChanged()
    End Sub
    Partial Private Sub OnmontoMaxChanging(value As Double)
    End Sub
    Partial Private Sub OnmontoMaxChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Activo = New EntitySet(Of Activo)(AddressOf Me.attach_Activo, AddressOf Me.detach_Activo)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idProveedor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idProveedor() As Integer
		Get
			Return Me._idProveedor
		End Get
		Set
			If ((Me._idProveedor = value)  _
						= false) Then
				Me.OnidProveedorChanging(value)
				Me.SendPropertyChanging
				Me._idProveedor = value
				Me.SendPropertyChanged("idProveedor")
				Me.OnidProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cedJur", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property cedJur() As String
		Get
			Return Me._cedJur
		End Get
		Set
			If (String.Equals(Me._cedJur, value) = false) Then
				Me.OncedJurChanging(value)
				Me.SendPropertyChanging
				Me._cedJur = value
				Me.SendPropertyChanged("cedJur")
				Me.OncedJurChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_montoMax", DbType:="Float NOT NULL")>  _
	Public Property montoMax() As Double
		Get
			Return Me._montoMax
		End Get
		Set
			If ((Me._montoMax = value)  _
						= false) Then
				Me.OnmontoMaxChanging(value)
				Me.SendPropertyChanging
				Me._montoMax = value
				Me.SendPropertyChanged("montoMax")
				Me.OnmontoMaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Activo", Storage:="_Activo", ThisKey:="idProveedor", OtherKey:="idProveedor")>  _
	Public Property Activo() As EntitySet(Of Activo)
		Get
			Return Me._Activo
		End Get
		Set
			Me._Activo.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Activo(ByVal entity As Activo)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Activo(ByVal entity As Activo)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoPersonal")>  _
Partial Public Class TipoPersonal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idTPersonal As Integer
	
	Private _Descripcion As String
	
	Private _Personal As EntitySet(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidTPersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnidTPersonalChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTPersonal", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idTPersonal() As Integer
		Get
			Return Me._idTPersonal
		End Get
		Set
			If ((Me._idTPersonal = value)  _
						= false) Then
				Me.OnidTPersonalChanging(value)
				Me.SendPropertyChanging
				Me._idTPersonal = value
				Me.SendPropertyChanged("idTPersonal")
				Me.OnidTPersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoPersonal_Personal", Storage:="_Personal", ThisKey:="idTPersonal", OtherKey:="idTPersonal")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.TipoPersonal = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.TipoPersonal = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Trazabilidad")>  _
Partial Public Class Trazabilidad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDTRAZABILIDAD As Integer
	
	Private _ACTIVO As String
	
	Private _IDPLANTACTUAL As Integer
	
	Private _IDNUEVAPLANTA As Integer
	
	Private _IDCUSTODIOACTUAL As Integer
	
	Private _IDNUEVOCUSTODIO As Integer
	
	Private _Activo1 As EntityRef(Of Activo)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Plantas As EntityRef(Of Plantas)
	
	Private _Personal1 As EntityRef(Of Personal)
	
	Private _Plantas1 As EntityRef(Of Plantas)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDTRAZABILIDADChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDTRAZABILIDADChanged()
    End Sub
    Partial Private Sub OnACTIVOChanging(value As String)
    End Sub
    Partial Private Sub OnACTIVOChanged()
    End Sub
    Partial Private Sub OnIDPLANTACTUALChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDPLANTACTUALChanged()
    End Sub
    Partial Private Sub OnIDNUEVAPLANTAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDNUEVAPLANTAChanged()
    End Sub
    Partial Private Sub OnIDCUSTODIOACTUALChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDCUSTODIOACTUALChanged()
    End Sub
    Partial Private Sub OnIDNUEVOCUSTODIOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDNUEVOCUSTODIOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Activo1 = CType(Nothing, EntityRef(Of Activo))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Plantas = CType(Nothing, EntityRef(Of Plantas))
		Me._Personal1 = CType(Nothing, EntityRef(Of Personal))
		Me._Plantas1 = CType(Nothing, EntityRef(Of Plantas))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDTRAZABILIDAD", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDTRAZABILIDAD() As Integer
		Get
			Return Me._IDTRAZABILIDAD
		End Get
		Set
			If ((Me._IDTRAZABILIDAD = value)  _
						= false) Then
				Me.OnIDTRAZABILIDADChanging(value)
				Me.SendPropertyChanging
				Me._IDTRAZABILIDAD = value
				Me.SendPropertyChanged("IDTRAZABILIDAD")
				Me.OnIDTRAZABILIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVO", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property ACTIVO() As String
		Get
			Return Me._ACTIVO
		End Get
		Set
			If (String.Equals(Me._ACTIVO, value) = false) Then
				If Me._Activo1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACTIVOChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVO = value
				Me.SendPropertyChanged("ACTIVO")
				Me.OnACTIVOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPLANTACTUAL", DbType:="Int NOT NULL")>  _
	Public Property IDPLANTACTUAL() As Integer
		Get
			Return Me._IDPLANTACTUAL
		End Get
		Set
			If ((Me._IDPLANTACTUAL = value)  _
						= false) Then
				If Me._Plantas1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDPLANTACTUALChanging(value)
				Me.SendPropertyChanging
				Me._IDPLANTACTUAL = value
				Me.SendPropertyChanged("IDPLANTACTUAL")
				Me.OnIDPLANTACTUALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDNUEVAPLANTA", DbType:="Int NOT NULL")>  _
	Public Property IDNUEVAPLANTA() As Integer
		Get
			Return Me._IDNUEVAPLANTA
		End Get
		Set
			If ((Me._IDNUEVAPLANTA = value)  _
						= false) Then
				If Me._Plantas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDNUEVAPLANTAChanging(value)
				Me.SendPropertyChanging
				Me._IDNUEVAPLANTA = value
				Me.SendPropertyChanged("IDNUEVAPLANTA")
				Me.OnIDNUEVAPLANTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDCUSTODIOACTUAL", DbType:="Int NOT NULL")>  _
	Public Property IDCUSTODIOACTUAL() As Integer
		Get
			Return Me._IDCUSTODIOACTUAL
		End Get
		Set
			If ((Me._IDCUSTODIOACTUAL = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDCUSTODIOACTUALChanging(value)
				Me.SendPropertyChanging
				Me._IDCUSTODIOACTUAL = value
				Me.SendPropertyChanged("IDCUSTODIOACTUAL")
				Me.OnIDCUSTODIOACTUALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDNUEVOCUSTODIO", DbType:="Int NOT NULL")>  _
	Public Property IDNUEVOCUSTODIO() As Integer
		Get
			Return Me._IDNUEVOCUSTODIO
		End Get
		Set
			If ((Me._IDNUEVOCUSTODIO = value)  _
						= false) Then
				If Me._Personal1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDNUEVOCUSTODIOChanging(value)
				Me.SendPropertyChanging
				Me._IDNUEVOCUSTODIO = value
				Me.SendPropertyChanged("IDNUEVOCUSTODIO")
				Me.OnIDNUEVOCUSTODIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Activo_Trazabilidad", Storage:="_Activo1", ThisKey:="ACTIVO", OtherKey:="INMOVILIARIO", IsForeignKey:=true)>  _
	Public Property Activo1() As Activo
		Get
			Return Me._Activo1.Entity
		End Get
		Set
			Dim previousValue As Activo = Me._Activo1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Activo1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Activo1.Entity = Nothing
					previousValue.Trazabilidad.Remove(Me)
				End If
				Me._Activo1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Trazabilidad.Add(Me)
					Me._ACTIVO = value.INMOVILIARIO
				Else
					Me._ACTIVO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Activo1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Trazabilidad", Storage:="_Personal", ThisKey:="IDCUSTODIOACTUAL", OtherKey:="idUsuario", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Trazabilidad.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Trazabilidad.Add(Me)
					Me._IDCUSTODIOACTUAL = value.idUsuario
				Else
					Me._IDCUSTODIOACTUAL = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plantas_Trazabilidad", Storage:="_Plantas", ThisKey:="IDNUEVAPLANTA", OtherKey:="idPlanta", IsForeignKey:=true)>  _
	Public Property Plantas() As Plantas
		Get
			Return Me._Plantas.Entity
		End Get
		Set
			Dim previousValue As Plantas = Me._Plantas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Plantas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Plantas.Entity = Nothing
					previousValue.Trazabilidad.Remove(Me)
				End If
				Me._Plantas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Trazabilidad.Add(Me)
					Me._IDNUEVAPLANTA = value.idPlanta
				Else
					Me._IDNUEVAPLANTA = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Plantas")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Trazabilidad1", Storage:="_Personal1", ThisKey:="IDNUEVOCUSTODIO", OtherKey:="idUsuario", IsForeignKey:=true)>  _
	Public Property Personal1() As Personal
		Get
			Return Me._Personal1.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal1.Entity = Nothing
					previousValue.Trazabilidad1.Remove(Me)
				End If
				Me._Personal1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Trazabilidad1.Add(Me)
					Me._IDNUEVOCUSTODIO = value.idUsuario
				Else
					Me._IDNUEVOCUSTODIO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plantas_Trazabilidad1", Storage:="_Plantas1", ThisKey:="IDPLANTACTUAL", OtherKey:="idPlanta", IsForeignKey:=true)>  _
	Public Property Plantas1() As Plantas
		Get
			Return Me._Plantas1.Entity
		End Get
		Set
			Dim previousValue As Plantas = Me._Plantas1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Plantas1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Plantas1.Entity = Nothing
					previousValue.Trazabilidad1.Remove(Me)
				End If
				Me._Plantas1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Trazabilidad1.Add(Me)
					Me._IDPLANTACTUAL = value.idPlanta
				Else
					Me._IDPLANTACTUAL = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Plantas1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Usuarios")>  _
Partial Public Class Usuarios
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idUsuario As Integer
	
	Private _idArea As System.Nullable(Of Integer)
	
	Private _Usuario As String
	
	Private _Pass As String
	
	Private _Areas As EntityRef(Of Areas)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnidUsuarioChanged()
    End Sub
    Partial Private Sub OnidAreaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidAreaChanged()
    End Sub
    Partial Private Sub OnUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnUsuarioChanged()
    End Sub
    Partial Private Sub OnPassChanging(value As String)
    End Sub
    Partial Private Sub OnPassChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Areas = CType(Nothing, EntityRef(Of Areas))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idUsuario", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idUsuario() As Integer
		Get
			Return Me._idUsuario
		End Get
		Set
			If ((Me._idUsuario = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._idUsuario = value
				Me.SendPropertyChanged("idUsuario")
				Me.OnidUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idArea", DbType:="Int")>  _
	Public Property idArea() As System.Nullable(Of Integer)
		Get
			Return Me._idArea
		End Get
		Set
			If (Me._idArea.Equals(value) = false) Then
				If Me._Areas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidAreaChanging(value)
				Me.SendPropertyChanging
				Me._idArea = value
				Me.SendPropertyChanged("idArea")
				Me.OnidAreaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usuario", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Usuario() As String
		Get
			Return Me._Usuario
		End Get
		Set
			If (String.Equals(Me._Usuario, value) = false) Then
				Me.OnUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Usuario = value
				Me.SendPropertyChanged("Usuario")
				Me.OnUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pass", DbType:="NVarChar(8) NOT NULL", CanBeNull:=false)>  _
	Public Property Pass() As String
		Get
			Return Me._Pass
		End Get
		Set
			If (String.Equals(Me._Pass, value) = false) Then
				Me.OnPassChanging(value)
				Me.SendPropertyChanging
				Me._Pass = value
				Me.SendPropertyChanged("Pass")
				Me.OnPassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Areas_Usuarios", Storage:="_Areas", ThisKey:="idArea", OtherKey:="idArea", IsForeignKey:=true)>  _
	Public Property Areas() As Areas
		Get
			Return Me._Areas.Entity
		End Get
		Set
			Dim previousValue As Areas = Me._Areas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Areas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Areas.Entity = Nothing
					previousValue.Usuarios.Remove(Me)
				End If
				Me._Areas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Usuarios.Add(Me)
					Me._idArea = value.idArea
				Else
					Me._idArea = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Areas")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Usuarios", Storage:="_Personal", ThisKey:="idUsuario", OtherKey:="idUsuario", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Usuarios = Nothing
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Usuarios = Me
					Me._idUsuario = value.idUsuario
				Else
					Me._idUsuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
